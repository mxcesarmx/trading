import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import pareto  # Import the pareto function from scipy.stats

def calculate_price_diff(symbol, start_date, end_date, interval):
    # Download historical stock data with the specified interval
    data = yf.download(symbol, start=start_date, end=end_date, interval=interval)

    # Calculate the difference between high and low prices
    price_diff = data['High'] - data['Low']

    return price_diff

def plot_pareto_distribution(data, xlabel, ylabel):
    # Calculate the parameters of the Pareto distribution
    alpha, loc, scale = pareto.fit(data)

    # Generate data points for the fitted Pareto distribution
    x = np.linspace(min(data), max(data), 100)
    y = pareto.pdf(x, alpha, loc, scale)

    # Calculate statistical summary
    mean_val = np.mean(data)
    median_val = np.median(data)
    std_val = np.std(data)
    q1, q3 = np.percentile(data, [25, 75])

    # Calculate how many values are under the median, over the median, in Q1, and in Q3
    under_median = len(data[data < median_val])
    over_median = len(data[data > median_val])
    in_q1 = len(data[data <= q1])
    in_q3 = len(data[data >= q3])

    # Plot the data histogram and the fitted Pareto distribution
    plt.hist(data, bins=20, density=True, alpha=0.7, color='b', edgecolor='black')
    plt.plot(x, y, 'r-', lw=2)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title('Pareto Distribution')
    #plt.legend(['Pareto Fit', 'Data Histogram'])
    plt.grid(True)

    # Add statistical summary to the plot
    plt.annotate(f'Mean: {mean_val:.2f}', xy=(0.7, 0.9), xycoords='axes fraction')
    plt.annotate(f'Median: {median_val:.2f}', xy=(0.7, 0.85), xycoords='axes fraction')
    plt.annotate(f'Standard Deviation: {std_val:.2f}', xy=(0.7, 0.8), xycoords='axes fraction')
    plt.annotate(f'Q1 (25th Percentile): {q1:.2f}', xy=(0.7, 0.75), xycoords='axes fraction')
    plt.annotate(f'Q3 (75th Percentile): {q3:.2f}', xy=(0.7, 0.7), xycoords='axes fraction')

    plt.annotate(f'Values < Median: {under_median}', xy=(0.7, 0.65), xycoords='axes fraction')
    plt.annotate(f'Values > Median: {over_median}', xy=(0.7, 0.6), xycoords='axes fraction')
    plt.annotate(f'Values in Q1: {in_q1}', xy=(0.7, 0.55), xycoords='axes fraction')
    plt.annotate(f'Values in Q3: {in_q3}', xy=(0.7, 0.5), xycoords='axes fraction')

    plt.show()

# Example usage:
symbol = 'NQ=F'  # Ethereum cryptocurrency symbol
start_date = '2020-01-01'
end_date = '2023-07-25'
interval = '1D'  # You can change this to '5m', '15m', '1h', '1d', '1wk', etc.

price_diff = calculate_price_diff(symbol, start_date, end_date, interval)

xlabel = 'Price Difference (High-Low)'
ylabel = 'Probability Density'

plot_pareto_distribution(price_diff, xlabel, ylabel)
